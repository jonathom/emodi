
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # *****************************************************************************
> # R Script implementing conventional random cross-validation.  
> # Related to the manuscript "Dealing with clustered samples for assessing map 
> # accuracy by cross-validation".
> # Contact: Sytze de Bruin, Wageningen University, Laboratory of Geo-information
> # Science and Remote Sensing, email: sytze.debruin@wur.nl
> # May 3, 2022
> # *****************************************************************************
> 
> # ****** load required libraries *******
> library(ranger)
> # library(sperrorest, lib.loc="/home/j/j_bahl03/R")
> library(parallel)
> # library(CAST)
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> library(sf)
Linking to GEOS 3.9.1, GDAL 3.2.1, PROJ 7.2.1
> source("/home/j/j_bahl03/R/CAST/R/CreateSpacetimeFolds.R")
> source("/home/j/j_bahl03/R/CAST/R/global_validation.R")
> 
> # ************ GLOBALS ***************
> samples   <- c("clusterMedium", "clusterStrong", "clusterGapped", "regular", 
+                "simpleRandom")
> infolder <- "~/deBruin_add_nndm/samples"
> # infolder <- ("../../deBruin_add_nndm/samples")
> outfolder <- "~/emodi/CVresults"
> startseed <- 1234567
> n_CV      <- 3  # number of cross validation replications
> n_samp    <- 100  # # number of sample replicates (for each design)
> cores <- 10
> 
> # create outfolders if they don't exist
> if(!dir.exists(outfolder))
+   dir.create(outfolder)
> 
> if(!dir.exists(paste0(outfolder, "/spatial")))
+   dir.create(paste0(outfolder, "/spatial"))
> 
> 
> # ************ FUNCTIONS ***************
> 
> err_fu <- function(obs, pred){
+   rmse <- sqrt(mean((obs-pred)^2))
+   muref <- mean(obs)
+   SSR <- sum((obs - pred)^2)
+   SST <- sum((obs - muref)^2)
+   mec <- 1 - SSR/SST
+   me <- mean(obs - pred)
+   list(me = me, rmse = rmse, mec = mec)
+ }
> 
> 
> predfun <- function(object, newdata){
+   pred <- predict(object, newdata)
+   pred[[1]]
+ }
> 
> 
> spatialCV <- function(smpl, number, variate, seed){
+   
+   fname <- paste0(variate, "data", sprintf("%03d", number), ".Rdata")
+   f_in <- file.path(infolder,smpl,fname)
+   load(f_in)
+   
+   RMSE <- numeric(n_CV)
+   folds <- list()
+   
+   for(i_CV in 1:n_CV) {
+     # fo <- as.formula(paste0("agb~", paste(names(AGBdata)[-1], collapse = "+")))
+     # if (!("ID" %in% names(AGBdata))) {AGBdata$ID <- 1:nrow(AGBdata)}
+     # flds <- CreateSpacetimeFolds(AGBdata, spacevar = "ID", k = 10)
+     # if ("ID" %in% names(AGBdata)) {AGBdata <- AGBdata[,!(names(AGBdata) %in% c("ID"))]}
+     
+     # find out autocorrelation ######################
+     # stack1 <- raster::raster("~/iloek_job/wadoux/investigate_spatial_validation/debruin/data/agb.tif")
+     # s_df <- raster::as.data.frame(stack1, xy=T, na.rm=T)
+     # sp_s <- s_df[sample(nrow(s_df), 10000), ]
+     # coordinates(sp_s) <- ~x+y
+     # lzn.vgm = gstat::variogram(agb~1, data = sp_s, cutoff = 700000)
+     # plot(lzn.vgm$dist, lzn.vgm$gamma)
+     # -> 500000 # pixelsize 500m, -> 1000 pixels autocorrelation
+     #################################################
+     
+     # wadoux spatial CV
+     # mdist <- dist(AGBdata[c("xcoord","ycoord")])
+     # hc <- hclust(mdist, method="complete")
+     # d = 1000  # the maximum distance between pixels within clusters (val.dist m * 1000 m = val.dist km)                   
+     # AGBdata$Clust_val.distkm = cutree(hc, h=d) 
+     
+     # try with coords
+     load(file.path(infolder, smpl, paste0(sprintf("%03d", number), "_coords.Rdata")))
+     
+     if(class(pts)[1] != "sf") {
+       pts <- as.data.frame(pts)
+       pts <- st_as_sf(pts, coords = c("x", "y"))
+     }
+     
+     mdist2 <- dist(st_coordinates(pts))
+     hc2 <- hclust(mdist2, method="complete")
+     AGBdata$Clust_val.distkm = cutree(hc2, h=500000) # tune this, leads to many folds!
+ 
+     flds <- CreateSpacetimeFolds(AGBdata, spacevar = "Clust_val.distkm")
+     
+     model <- train(AGBdata[,!(names(AGBdata) %in% c("agb", "ID", "Clust_val.distkm"))],
+                    AGBdata$agb,
+                    method="rf",
+                    importance=TRUE,
+                    tuneGrid = expand.grid(mtry=2),
+                    trControl = trainControl(method="cv",
+                                             index=flds$index,
+                                             indexOut=flds$indexOut,
+                                             savePredictions = "final"))
+     
+     RMSE[i_CV] <- global_validation(model)["RMSE"][[1]]
+     folds <- append(folds, flds)
+   }
+   
+   # if(variate == "AGB"){
+   #   fo <- as.formula(paste0("agb~", paste(names(AGBdata)[-1], collapse = "+")))
+   #   tst <- sperrorest(fo, data=AGBdata, model_fun=ranger, 
+   #                     model_args=list(respect.unordered.factors=TRUE),
+   #                     pred_fun=predfun, 
+   #                     smp_fun=partition_kmeans, coords=c("xcoord", "ycoord"),
+   #                     smp_args=list(balancing_steps = 1, seed1=seed, 
+   #                                   repetition=1:n_CV, iter.max = 50), 
+   #                     err_fun = err_fu)
+   # } else{
+   #   fo <- as.formula(paste0("ocs~", paste(names(OCSdata)[-1], collapse = "+")))
+   #   tst <- sperrorest(fo, data=OCSdata, model_fun=ranger, 
+   #                     model_args=list(respect.unordered.factors=TRUE),
+   #                     pred_fun=predfun, 
+   #                     smp_fun=partition_kmeans, coords=c("xcoord", "ycoord"),
+   #                     smp_args=list(balancing_steps = 1, seed1=seed, 
+   #                                   repetition=1:n_CV, iter.max = 50), 
+   #                     err_fun = err_fu)
+   # }
+ 
+   #ME   <- tst$error_rep$test_me
+   #RMSE <- tst$error_rep$test_rmse
+   #MEC  <- tst$error_rep$test_mec
+   #rm(tst)
+   
+   fname <-  paste0(variate, "_", smpl, sprintf("%03d", number), ".Rdata")
+   f_out <- file.path(outfolder, "spatial", fname)
+   save(RMSE, folds, file=f_out)
+   
+ }
> 
> 
> # ************ CALL THE FUNCTIONS ************ 
> mclapply(seq(n_samp), function(i) {
+   for(smpl in samples) {
+     spatialCV(smpl, i, "AGB", startseed)
+     # spatialCV(smpl, i, "OCS", startseed)
+   }
+ }, mc.cores = cores)
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[1] "warning: k is higher than number of unique locations. k is set to 9"
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

[[31]]
NULL

[[32]]
NULL

[[33]]
NULL

[[34]]
NULL

[[35]]
NULL

[[36]]
NULL

[[37]]
NULL

[[38]]
NULL

[[39]]
NULL

[[40]]
NULL

[[41]]
NULL

[[42]]
NULL

[[43]]
NULL

[[44]]
NULL

[[45]]
NULL

[[46]]
NULL

[[47]]
NULL

[[48]]
NULL

[[49]]
NULL

[[50]]
NULL

[[51]]
NULL

[[52]]
NULL

[[53]]
NULL

[[54]]
NULL

[[55]]
NULL

[[56]]
NULL

[[57]]
NULL

[[58]]
NULL

[[59]]
NULL

[[60]]
NULL

[[61]]
NULL

[[62]]
NULL

[[63]]
NULL

[[64]]
NULL

[[65]]
NULL

[[66]]
NULL

[[67]]
NULL

[[68]]
NULL

[[69]]
NULL

[[70]]
NULL

[[71]]
NULL

[[72]]
NULL

[[73]]
NULL

[[74]]
NULL

[[75]]
NULL

[[76]]
NULL

[[77]]
NULL

[[78]]
NULL

[[79]]
NULL

[[80]]
NULL

[[81]]
NULL

[[82]]
NULL

[[83]]
NULL

[[84]]
NULL

[[85]]
NULL

[[86]]
NULL

[[87]]
NULL

[[88]]
NULL

[[89]]
NULL

[[90]]
NULL

[[91]]
NULL

[[92]]
NULL

[[93]]
NULL

[[94]]
NULL

[[95]]
NULL

[[96]]
NULL

[[97]]
NULL

[[98]]
NULL

[[99]]
NULL

[[100]]
NULL

> 
> proc.time()
     user    system   elapsed 
17851.344    66.348  2205.716 
