
R version 4.0.3 (2020-10-10) -- "Bunny-Wunnies Freak Out"
Copyright (C) 2020 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> # *****************************************************************************
> # R Script implementing conventional random f-fold cross-validation.  
> # Related to the paper "Dealing with clustered samples for assessing map 
> # accuracy by cross-validation".
> # Contact: Sytze de Bruin, Wageningen University, Laboratory of Geo-information
> # Science and Remote Sensing, email: sytze.debruin@wur.nl
> # May 3, 2022
> # *****************************************************************************
> 
> # ****** load required library *******
> library(ranger)
> library(parallel)
> library(caret)
Loading required package: lattice
Loading required package: ggplot2
> source("/home/j/j_bahl03/R/CAST/R/global_validation.R")
> 
> # ************ GLOBALS ***************
> samples   <- c("clusterMedium", "clusterStrong", "clusterGapped", "regular", 
+                "simpleRandom")
> 
> infolder <- "~/deBruin_add_nndm/samples"
> outfolder <- "~/emodi/CVresults"
> startseed <- 1234567
> n_CV   <- 3  # number of cross validation replications
> n_samp <- 100  # number of sample replicates (for each design)
> cores <- 10
> 
> # notes about the time:
> # n_CV 10 x n_samp 20 with 20 cores in 1h: 3/5 samples
> # n_CV  1 x n_samp 20 with 20 cores in 20m: all samples
> 
> 
> # create outfolders if they don't exist
> if(!dir.exists(outfolder))
+   dir.create(outfolder)
> 
> if(!dir.exists(paste0(outfolder, "/random")))
+   dir.create(paste0(outfolder, "/random"))
> 
> 
> # ************ FUNCTIONS ***************
> 
> sumSquares <- function(ref, pred){
+   muref <- mean(ref, na.rm=T)
+   SSR <- sum((ref - pred)^2)
+   SST <- sum((ref - muref)^2)
+   return(c(SSR, SST))
+ }
> 
> randomCV <- function(smpl, number, variate, seed){
+   
+   fname <- paste0(variate, "data", sprintf("%03d", number), ".Rdata")
+   f_in <- file.path(infolder,smpl,fname)
+   load(f_in)
+   
+   MEC  <- numeric(n_CV)
+   RMSE <- numeric(n_CV)
+   folds <- list()
+   
+   for(i_CV in 1:n_CV){
+     
+     SSR <- 0
+     SST <- 0
+     
+     # ************************
+     # ****** 10 fold CV ******
+     # ************************
+     set.seed(seed)
+     flds <- createFolds(AGBdata$agb, k = 10)
+     
+     model <- train(AGBdata[,!(names(AGBdata) %in% c("agb", "ID"))],
+                    AGBdata$agb,
+                    method="rf",
+                    importance=TRUE,
+                    tuneGrid = expand.grid(mtry=2),
+                    trControl = trainControl(method="cv", index=flds,
+                                             savePredictions = "final"))
+     
+     RMSE[i_CV] <- global_validation(model)["RMSE"][[1]]
+     folds <- append(folds, flds)
+     
+   } # loop over i_CV
+   
+   fname  <-  paste0(variate, "_", smpl, sprintf("%03d", number), ".Rdata")
+   f_out  <- file.path(outfolder,"random", fname)
+   save(RMSE, folds, file=f_out)
+ }
> 
> 
> # ************ CALL THE FUNCTIONS ************ 
> mclapply(seq(n_samp), function(i) {
+   for(smpl in samples) {
+     randomCV(smpl, i, "AGB", startseed)
+     # randomCV(smpl, i, "OCS", startseed)
+   }
+ }, mc.cores = cores)
[[1]]
NULL

[[2]]
NULL

[[3]]
NULL

[[4]]
NULL

[[5]]
NULL

[[6]]
NULL

[[7]]
NULL

[[8]]
NULL

[[9]]
NULL

[[10]]
NULL

[[11]]
NULL

[[12]]
NULL

[[13]]
NULL

[[14]]
NULL

[[15]]
NULL

[[16]]
NULL

[[17]]
NULL

[[18]]
NULL

[[19]]
NULL

[[20]]
NULL

[[21]]
NULL

[[22]]
NULL

[[23]]
NULL

[[24]]
NULL

[[25]]
NULL

[[26]]
NULL

[[27]]
NULL

[[28]]
NULL

[[29]]
NULL

[[30]]
NULL

[[31]]
NULL

[[32]]
NULL

[[33]]
NULL

[[34]]
NULL

[[35]]
NULL

[[36]]
NULL

[[37]]
NULL

[[38]]
NULL

[[39]]
NULL

[[40]]
NULL

[[41]]
NULL

[[42]]
NULL

[[43]]
NULL

[[44]]
NULL

[[45]]
NULL

[[46]]
NULL

[[47]]
NULL

[[48]]
NULL

[[49]]
NULL

[[50]]
NULL

[[51]]
NULL

[[52]]
NULL

[[53]]
NULL

[[54]]
NULL

[[55]]
NULL

[[56]]
NULL

[[57]]
NULL

[[58]]
NULL

[[59]]
NULL

[[60]]
NULL

[[61]]
NULL

[[62]]
NULL

[[63]]
NULL

[[64]]
NULL

[[65]]
NULL

[[66]]
NULL

[[67]]
NULL

[[68]]
NULL

[[69]]
NULL

[[70]]
NULL

[[71]]
NULL

[[72]]
NULL

[[73]]
NULL

[[74]]
NULL

[[75]]
NULL

[[76]]
NULL

[[77]]
NULL

[[78]]
NULL

[[79]]
NULL

[[80]]
NULL

[[81]]
NULL

[[82]]
NULL

[[83]]
NULL

[[84]]
NULL

[[85]]
NULL

[[86]]
NULL

[[87]]
NULL

[[88]]
NULL

[[89]]
NULL

[[90]]
NULL

[[91]]
NULL

[[92]]
NULL

[[93]]
NULL

[[94]]
NULL

[[95]]
NULL

[[96]]
NULL

[[97]]
NULL

[[98]]
NULL

[[99]]
NULL

[[100]]
NULL

> 
> proc.time()
    user   system  elapsed 
3665.014   38.131  431.755 
